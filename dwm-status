#!/bin/bash
# 
# dwm-status
# 
# part of dwm startup 
#
# @author Martin Ohmann <martin@mohmann.de>
#

# colors
color_white="\x01"
color_red="\x04"
color_yellow="\x05"
color_grey="\x06"
color_orange="\x07"

# icons glyphs from ohsnap.icons.pcf
glyph_wifi="\u20AD"
glyph_weather="\u20B1"
glyph_pacman="\u20BA"
glyph_vol_mute="\u20C3"
glyph_vol_min="\u20C4"
glyph_vol_max="\u20C5"
glyph_cpu="\u20CE"
glyph_arrow_down="\u20DA"
glyph_arrow_up="\u20DB"
glyph_song_info="\u20EA"
glyph_bat_empty="\u20EE"
glyph_bat_low="\u20EF"
glyph_bat_high="\u20F0"
glyph_play="\uE620"
glyph_pause="\uE720"

#misc functions
update_current_location() {
	local geo_xml=$(curl -s 'http://freegeoip.net/xml/')

	if [[ $? -eq 0 ]]; then
		latitude=$(echo -e "$geo_xml" | grep 'Latitude' | \
			sed -e 's/<Latitude>\(.*\)<\/Latitude>/\1/')
		
		longitude=$(echo -e "$geo_xml" | grep 'Longitude' | \
			sed -e 's/<Longitude>\(.*\)<\/Longitude>/\1/')

		if [[ ! -z "$latitude" && ! -z "$longitude" ]]; then
			current_location_lat=$latitude
		  current_location_lng=$longitude
		fi
	fi
}

# status functions
print_volume() {
	local volume_prefix
	local volume=$(amixer get Master | tail -1 | sed 's/.*\[\([0-9]*\)%\].*/\1/')

	if amixer get Master | tail -1 | grep -e '\[off\]' > /dev/null; then
		volume_prefix="${color_red}${glyph_vol_mute}"
	else
		if [[ $volume -eq 0 ]]; then
			volume_prefix="${color_red}${glyph_vol_mute}"	
		elif [[ $volume -le 40 ]]; then
			volume_prefix="${color_grey}${glyph_vol_min}"	
		else
			volume_prefix="${color_grey}${glyph_vol_max}"	
		fi
	fi
	
	echo -ne "${volume_prefix}${color_white}${volume}%"
}

print_cpu_temp() {
	local temp
	local temp_prefix
	local temp0=$(($(cat /sys/class/thermal/thermal_zone0/temp) / 1000))
	local temp1=$(($(cat /sys/class/thermal/thermal_zone1/temp) / 1000))
	
	if [[ $temp0 -gt $temp1 ]]; then
		temp=$temp0
	else
		temp=$temp1
	fi
	
	if [[ $temp -ge 80 ]]; then
		temp_prefix="${color_red}${glyph_cpu} "
	elif [[ $temp -ge 70 ]]; then 
		temp_prefix="${color_orange}${glyph_cpu} "
	elif [[ $temp -ge 60 ]]; then 
		temp_prefix="${color_yellow}${glyph_cpu} "
	else
		temp_prefix="${color_grey}${glyph_cpu}${color_white}"
	fi

	echo -ne "${temp_prefix}${temp}°C"
}

print_battery() {
	local battery
	local battery_prefix
	local battery_charge_glyph
	local battery_percentage
	local battery_remaining
	local battery_acpi=$(acpi -b)

	if [[ -z "$battery_acpi" ]]; then
		battery_prefix="${color_red}${glyph_bat_empty} "
		battery="not present"
	else
		battery_charge_glyph=$(echo "${battery_acpi}" | \
			awk -v glyph_arrow_up="\\${glyph_arrow_up}" \
				-v glyph_arrow_down="\\${glyph_arrow_down}" \
			'{ 
				if ($3 == "Discharging,") { 
					print glyph_arrow_down 
				} else if ($3 == "Charging,") { 
					print glyph_arrow_up 
				} else {
					print "" 
				}
			}')
		
		battery_percentage=$(echo "${battery_acpi}" | \
			awk '{ print $4 }' | tr -d '%,')
		
		battery_remaining=$(echo "${battery_acpi}" | \
			awk '{ if ($5 != "until" && $5 != "discharging") { print $5 } }' | \
			cut -d : -f 1-2)
		
		battery="${battery_percentage}%${battery_charge_glyph}"
		
		[[ -z "$battery_remaining" ]] || battery+=" ${battery_remaining}"

		if [[ $battery_percentage -le 10 ]]; then
			battery_prefix="${color_red}${glyph_bat_empty} "
		elif [[ $battery_percentage -le 15 ]]; then
			battery_prefix="${color_orange}${glyph_bat_low} "
		elif [[ $battery_percentage -le 20 ]]; then
			battery_prefix="${color_yellow}${glyph_bat_low} "
		else
			battery_prefix="${color_grey}${glyph_bat_high}${color_white}"
		fi
	fi

	echo -ne "${battery_prefix}${battery}"
}

print_song_info() {
	local song_info
	local song_info_prefix
	local mpd_status=$(mpc 2> /dev/null)

	if [[ $? -eq 0 ]]; then
		if echo "$mpd_status" | egrep 'playing|paused' > /dev/null 2>&1; then
			song_info_prefix="${color_grey}${glyph_song_info}${color_white}"
			
			song_info=$(echo "$mpd_status" | \
				awk -v color_yellow="${color_yellow}" \
					-v glyph_pause="\\${glyph_pause}" \
					-v glyph_play="\\${glyph_play}" \
				'{ 
					if (NR == 1) {
						title = $0
					}
					if (NR == 2) { 
						status = $1
						time = $3 
					}
				} END { 
					if (length(title) > 25) {
						title = substr(title, 1, 22) "..."
					}
					if (status == "[paused]") {
						printf "%s%s %s%s", title, color_yellow, glyph_pause, time
					} else {
						printf "%s %s%s", title, glyph_play, time
					}
				}')

				song_info="${song_info_prefix}$(echo -ne "$song_info" | \
					sed 's/\([\ä\ö\ü\Ä\Ü\Ö]\)/\1e/g;y/\ä\ö\ü\Ä\Ö\Ü/aouAOU/;s/\ß/ss/g')"
		fi
	fi

	echo -ne "${song_info:-""}"
}

print_weather() {
	local temp
	local status_code
	local condition
	local weather
	local weather_xml=$(curl -s "http://api.openweathermap.org/data/2.5/weather\
?lat=${current_location_lat:-52.52}\
&lon=${current_location_lng:-13.41}&units=metric&mode=xml")
	
	if [[ $? -eq 0 ]]; then
		temp=$(echo -e "$weather_xml" | grep 'temperature' | \
			sed -e 's/^.*value="\(-\?[0-9]\+\)\.\?[0-9]*".*$/\1/')
		status_code=$(echo -e "$weather_xml" | grep 'weather' | \
			sed -e 's/^.*number="\([0-9]\+\)".*$/\1/')
	
		if [[ ! -z "$temp" ]]; then
			case "$status_code" in
				2??)
					condition="thunderstorm"
					;;
				3??)
					condition="drizzle"
					;;
				5??)
					condition="rain"
					;;
				6??)
					condition="snow"
					;;
				*)
					condition=$(echo -e "$weather_xml" | grep 'weather' | \
						sed -e 's/^.*value="\([^"]\+\)".*$/\1/' | tr '[:upper:]' '[:lower:]')
			esac
				
			[[ "$temp" -eq -0 ]] && temp=0
			weather="${color_grey}${glyph_weather}${color_white}${temp}°C"
			[[ ! -z "$condition" ]] && weather+=", ${condition}"
		fi
	fi

	echo -ne "${weather:-""}"
}

print_date() {
	echo -ne "${color_white} $(date +"%a %b %d %Y, %H:%M")"
}

print_ip_addr() {
	# can get confused if you use vmware
	local ip=$(for i in `ip r`; do echo $i; done | grep -A 1 src | tail -n1) 
	echo -ne "${color_white}${ip}"
}

print_wifi_link() {
	local current
	local total
	local link_quality

	if ! iwconfig wlp3s0 | grep 'ESSID:off' > /dev/null 2>&1; then
		eval $(iwconfig wlp3s0 | grep 'Link Quality' | \
			sed -e 's/^[^=]*=\([0-9]*\)\/\([0-9]*\).*/current=\1; total=\2/g')

		link_quality="${color_grey}${glyph_wifi}${color_white}$((current*100/total))%"
	fi
	echo -ne "${link_quality:-""}"
}

print_pacman_updates() {
	local updates
	local update_count=$(pacman -Qqu --dbpath /tmp/.localsync | wc -l)

	if [[ $update_count -gt 0 ]]; then
		updates="${color_grey}${glyph_pacman}${color_white}${update_count}"
	fi

	echo -ne "${updates:-""}"
}

# gather status info
song_info=$(print_song_info)
volume=$(print_volume)
the_date=$(print_date)

# update every 10 seconds
if [[ $((cnt % 10 )) -eq 0 ]]; then
	cpu_temp=$(print_cpu_temp)
	battery=$(print_battery)
	# wifi_link=$(print_wifi_link)
fi

# update every 5 minutes
if [[ $((cnt % 300)) -eq 0 ]]; then
	weather=$(print_weather)
fi

# update every 10 minutes
if [[ $((cnt % 600)) -eq 0 ]]; then
	updates=$(print_pacman_updates)
fi

# update every 60 minutes
if [[ $((cnt % 3600)) -eq 0 ]]; then
	update_current_location
fi

# update statusbar
xsetroot -name "\
${song_info:-""}\
${weather:-""}\
${battery:-""}\
${volume:-""}\
${cpu_temp:-""}\
${updates:-""}\
${wifi_link:-""}\
${the_date:-""}"
